// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/openshift/api/helm/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectHelmChartRepositoryLister helps list ProjectHelmChartRepositories.
// All objects returned here must be treated as read-only.
type ProjectHelmChartRepositoryLister interface {
	// List lists all ProjectHelmChartRepositories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ProjectHelmChartRepository, err error)
	// ProjectHelmChartRepositories returns an object that can list and get ProjectHelmChartRepositories.
	ProjectHelmChartRepositories(namespace string) ProjectHelmChartRepositoryNamespaceLister
	ProjectHelmChartRepositoryListerExpansion
}

// projectHelmChartRepositoryLister implements the ProjectHelmChartRepositoryLister interface.
type projectHelmChartRepositoryLister struct {
	indexer cache.Indexer
}

// NewProjectHelmChartRepositoryLister returns a new ProjectHelmChartRepositoryLister.
func NewProjectHelmChartRepositoryLister(indexer cache.Indexer) ProjectHelmChartRepositoryLister {
	return &projectHelmChartRepositoryLister{indexer: indexer}
}

// List lists all ProjectHelmChartRepositories in the indexer.
func (s *projectHelmChartRepositoryLister) List(selector labels.Selector) (ret []*v1beta1.ProjectHelmChartRepository, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ProjectHelmChartRepository))
	})
	return ret, err
}

// ProjectHelmChartRepositories returns an object that can list and get ProjectHelmChartRepositories.
func (s *projectHelmChartRepositoryLister) ProjectHelmChartRepositories(namespace string) ProjectHelmChartRepositoryNamespaceLister {
	return projectHelmChartRepositoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectHelmChartRepositoryNamespaceLister helps list and get ProjectHelmChartRepositories.
// All objects returned here must be treated as read-only.
type ProjectHelmChartRepositoryNamespaceLister interface {
	// List lists all ProjectHelmChartRepositories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ProjectHelmChartRepository, err error)
	// Get retrieves the ProjectHelmChartRepository from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ProjectHelmChartRepository, error)
	ProjectHelmChartRepositoryNamespaceListerExpansion
}

// projectHelmChartRepositoryNamespaceLister implements the ProjectHelmChartRepositoryNamespaceLister
// interface.
type projectHelmChartRepositoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectHelmChartRepositories in the indexer for a given namespace.
func (s projectHelmChartRepositoryNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ProjectHelmChartRepository, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ProjectHelmChartRepository))
	})
	return ret, err
}

// Get retrieves the ProjectHelmChartRepository from the indexer for a given namespace and name.
func (s projectHelmChartRepositoryNamespaceLister) Get(name string) (*v1beta1.ProjectHelmChartRepository, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("projecthelmchartrepository"), name)
	}
	return obj.(*v1beta1.ProjectHelmChartRepository), nil
}
