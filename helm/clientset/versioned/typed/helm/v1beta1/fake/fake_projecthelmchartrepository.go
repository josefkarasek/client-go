// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/openshift/api/helm/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeProjectHelmChartRepositories implements ProjectHelmChartRepositoryInterface
type FakeProjectHelmChartRepositories struct {
	Fake *FakeHelmV1beta1
	ns   string
}

var projecthelmchartrepositoriesResource = schema.GroupVersionResource{Group: "helm.openshift.io", Version: "v1beta1", Resource: "projecthelmchartrepositories"}

var projecthelmchartrepositoriesKind = schema.GroupVersionKind{Group: "helm.openshift.io", Version: "v1beta1", Kind: "ProjectHelmChartRepository"}

// Get takes name of the projectHelmChartRepository, and returns the corresponding projectHelmChartRepository object, and an error if there is any.
func (c *FakeProjectHelmChartRepositories) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.ProjectHelmChartRepository, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(projecthelmchartrepositoriesResource, c.ns, name), &v1beta1.ProjectHelmChartRepository{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ProjectHelmChartRepository), err
}

// List takes label and field selectors, and returns the list of ProjectHelmChartRepositories that match those selectors.
func (c *FakeProjectHelmChartRepositories) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.ProjectHelmChartRepositoryList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(projecthelmchartrepositoriesResource, projecthelmchartrepositoriesKind, c.ns, opts), &v1beta1.ProjectHelmChartRepositoryList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.ProjectHelmChartRepositoryList{ListMeta: obj.(*v1beta1.ProjectHelmChartRepositoryList).ListMeta}
	for _, item := range obj.(*v1beta1.ProjectHelmChartRepositoryList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested projectHelmChartRepositories.
func (c *FakeProjectHelmChartRepositories) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(projecthelmchartrepositoriesResource, c.ns, opts))

}

// Create takes the representation of a projectHelmChartRepository and creates it.  Returns the server's representation of the projectHelmChartRepository, and an error, if there is any.
func (c *FakeProjectHelmChartRepositories) Create(ctx context.Context, projectHelmChartRepository *v1beta1.ProjectHelmChartRepository, opts v1.CreateOptions) (result *v1beta1.ProjectHelmChartRepository, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(projecthelmchartrepositoriesResource, c.ns, projectHelmChartRepository), &v1beta1.ProjectHelmChartRepository{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ProjectHelmChartRepository), err
}

// Update takes the representation of a projectHelmChartRepository and updates it. Returns the server's representation of the projectHelmChartRepository, and an error, if there is any.
func (c *FakeProjectHelmChartRepositories) Update(ctx context.Context, projectHelmChartRepository *v1beta1.ProjectHelmChartRepository, opts v1.UpdateOptions) (result *v1beta1.ProjectHelmChartRepository, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(projecthelmchartrepositoriesResource, c.ns, projectHelmChartRepository), &v1beta1.ProjectHelmChartRepository{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ProjectHelmChartRepository), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeProjectHelmChartRepositories) UpdateStatus(ctx context.Context, projectHelmChartRepository *v1beta1.ProjectHelmChartRepository, opts v1.UpdateOptions) (*v1beta1.ProjectHelmChartRepository, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(projecthelmchartrepositoriesResource, "status", c.ns, projectHelmChartRepository), &v1beta1.ProjectHelmChartRepository{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ProjectHelmChartRepository), err
}

// Delete takes name of the projectHelmChartRepository and deletes it. Returns an error if one occurs.
func (c *FakeProjectHelmChartRepositories) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(projecthelmchartrepositoriesResource, c.ns, name, opts), &v1beta1.ProjectHelmChartRepository{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeProjectHelmChartRepositories) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(projecthelmchartrepositoriesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.ProjectHelmChartRepositoryList{})
	return err
}

// Patch applies the patch and returns the patched projectHelmChartRepository.
func (c *FakeProjectHelmChartRepositories) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.ProjectHelmChartRepository, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(projecthelmchartrepositoriesResource, c.ns, name, pt, data, subresources...), &v1beta1.ProjectHelmChartRepository{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ProjectHelmChartRepository), err
}
